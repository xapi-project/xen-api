#!/usr/bin/env python
#
# xapi plugin script to update the cache of configuration items in the
# ovs-vswitchd configuration that are managed in the xapi database when
# integrated with Citrix management tools.

# Copyright (C) 2009, 2010, 2011, 2012, 2013 Nicira, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at:
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# TBD: - error handling needs to be improved.  Currently this can leave
# TBD:   the system in a bad state if anything goes wrong.

import XenAPIPlugin
import os
import subprocess
import syslog
import re

vsctl = '/usr/bin/ovs-vsctl'
ofctl = '/usr/bin/ovs-ofctl'
bootstrap_cacert = '/etc/openvswitch/vswitchd.cacert'
preinstalled_cacert = '/etc/stunnel/certs/sdn-controller-ca.pem'
iptablectl = '/etc/xapi.d/plugins/firewall-port'

# Delete the CA certificate, so that we go back to boot-strapping mode
def delete_cacert():
    try:
        os.remove(bootstrap_cacert)
    except OSError:
        # Ignore error if file doesn't exist
        pass


def update(session, args):
    pools = session.xenapi.pool.get_all()
    # We assume there is only ever one pool...
    if len(pools) == 0:
        raise XenAPIPlugin.Failure('NO_POOL_FOR_HOST', [])
    if len(pools) > 1:
        raise XenAPIPlugin.Failure('MORE_THAN_ONE_POOL_FOR_HOST', [])

    new_controller = False
    pool = session.xenapi.pool.get_record(pools[0])

    bootstrap = False
    controller = ''
    controller_protocol = ''
    controller_address = ''
    controller_port = ''

    controllers = session.xenapi.SDN_controller.get_all()
    if len(controllers) > 0:
        # There is at most one SDN_controller record.
        controller_protocol = session.xenapi.SDN_controller.get_protocol(controllers[0])
        controller_address = session.xenapi.SDN_controller.get_address(controllers[0])
        controller_port = session.xenapi.SDN_controller.get_port(controllers[0])
        bootstrap, controller = composeController(controller_protocol, controller_address, controller_port)

    ret_str = ''
    currentControllers = vswitchCurrentControllers()

    if not controller and currentControllers:
        delete_cacert()
        cmd = [iptablectl, 'close', '6640']
        subprocess.call(cmd)
        try:
            emergency_reset(session, None)
        except:
            pass
        removeControllerCfg()
        ret_str += 'Successfully removed controller config.  '
    # controller cannot be empty, otherwise, this will always be True.
    elif controller and controller not in currentControllers:
        delete_cacert()
        try:
            emergency_reset(session, None)
        except:
            pass
        setControllerCfg(bootstrap, controller)
        new_controller = True
        ret_str += 'Successfully set controller to %s.  ' % controller

    try:
        pool_fail_mode = pool['other_config']['vswitch-controller-fail-mode']
    except KeyError, e:
        pool_fail_mode = None

    bton = {}

    for rec in session.xenapi.network.get_all_records().values():
        try:
            bton[rec['bridge']] = rec
        except KeyError:
            pass

    # If new controller, get management MAC addresses from XAPI now
    # in case fail_mode set to secure which may affect XAPI access
    mgmt_bridge = None
    host_mgmt_mac = None
    host_mgmt_device = None
    pool_mgmt_macs = {}
    if new_controller:
        query = 'field "management"="true"'
        recs = session.xenapi.PIF.get_all_records_where(query)
        for rec in recs.itervalues():
            pool_mgmt_macs[rec.get('MAC')] = rec.get('device')

    dib_changed = False
    fail_mode_changed = False
    for bridge in vswitchCfgQuery(['list-br']).split():
        if not bridge in bton:
            continue
        network = bton[bridge]
        bridge = vswitchCfgQuery(['br-to-parent', bridge])

        xapi_dib = network['other_config'].get('vswitch-disable-in-band')
        if not xapi_dib:
            xapi_dib = ''

        ovs_dib = vswitchCfgQuery(['--', '--if-exists', 'get', 'Bridge',
                                   bridge,
                                   'other_config:disable-in-band']).strip('"')

        # Do nothing if setting is invalid, and warn the user.
        if xapi_dib not in ['true', 'false', '']:
            ret_str += '"' + xapi_dib + '"' + \
                ' is an invalid value for vswitch-disable-in-band on ' + \
                bridge + '  '

        # Change bridge disable-in-band option if XAPI and OVS states differ.
        elif xapi_dib != ovs_dib:
            # 'true' or 'false'
            if xapi_dib:
                vswitchCfgMod(['--', 'set', 'Bridge', bridge,
                               'other_config:disable-in-band=' + xapi_dib])
            # '' or None
            else:
                vswitchCfgMod(['--', 'remove', 'Bridge', bridge,
                               'other_config', 'disable-in-band'])
            dib_changed = True

        # Change bridge fail_mode if XAPI state differs from OVS state.
        bridge_fail_mode = vswitchCfgQuery(['get', 'Bridge',
                                            bridge, 'fail_mode']).strip('[]"')

        try:
            other_config = bton[bridge]['other_config']
            fail_mode = other_config['vswitch-controller-fail-mode']
        except KeyError, e:
            fail_mode = None

        if fail_mode not in ['secure', 'standalone']:
            fail_mode = pool_fail_mode

        if fail_mode != 'secure':
            fail_mode = 'standalone'

        if bridge_fail_mode != fail_mode:
            vswitchCfgMod(['--', 'set', 'Bridge', bridge,
                           'fail_mode=%s' % fail_mode])
            fail_mode_changed = True

        # Determine local mgmt MAC address if host being added to secure
        # pool so we can add default flows to allow management traffic
        if new_controller and fail_mode_changed and pool_fail_mode == 'secure':
            oc = vswitchCfgQuery(['get', 'Bridge', bridge, 'other-config'])
            m = re.match('.*hwaddr="([0-9a-fA-F:].*)".*', oc)
            if m and m.group(1) in pool_mgmt_macs.keys():
                mgmt_bridge = bridge
                host_mgmt_mac = m.group(1)
                host_mgmt_device = pool_mgmt_macs[host_mgmt_mac]

    if (host_mgmt_mac is not None and mgmt_bridge is not None and
            host_mgmt_device is not None):
        tp = 'idle_timeout=0,priority=0'
        port = vswitchCfgQuery(['get', 'interface', host_mgmt_device,
                                'ofport'])

        addFlow(mgmt_bridge, '%s,in_port=%s,arp,nw_proto=1,actions=local' %
                (tp, port))
        addFlow(mgmt_bridge, '%s,in_port=local,arp,dl_src=%s,actions=%s' %
                (tp, host_mgmt_mac, port))
        addFlow(mgmt_bridge, '%s,in_port=%s,dl_dst=%s,actions=local' %
                (tp, port, host_mgmt_mac))
        addFlow(mgmt_bridge, '%s,in_port=local,dl_src=%s,actions=%s' %
                (tp, host_mgmt_mac, port))

    if dib_changed:
        ret_str += 'Updated in-band management.  '
    if fail_mode_changed:
        ret_str += 'Updated fail_mode.  '

    if ret_str != '':
        return ret_str
    else:
        return 'No change to configuration'


def vswitchCurrentControllers():
    controllers = vswitchCfgQuery(['get-manager'])
    return controllers.split('\n')


def removeControllerCfg():
    vswitchCfgMod(['--', 'del-manager',
                   '--', 'del-ssl'])


def setControllerCfg(bootstrap, controller):
    # /etc/xensource/xapi-ssl.pem is mentioned twice below because it
    # contains both the private key and the certificate.
    if bootstrap:
        # For active ssl, do not need to turn on TCP port 6640 on host.
        cmd = [iptablectl, 'close', '6640']
        subprocess.call(cmd)
        vswitchCfgMod(['--', 'del-manager',
                       '--', 'del-ssl',
                       '--', '--bootstrap', 'set-ssl',
                       '/etc/xensource/xapi-ssl.pem',
                       '/etc/xensource/xapi-ssl.pem',
                       bootstrap_cacert,
                       '--', 'set-manager', controller])
    else:
        # For passive ssl, only TCP port 6640 is meaningful.
        # Turn on the port of the host.
        cmd = [iptablectl, 'open', '6640']
        subprocess.call(cmd)
        vswitchCfgMod(['--', 'del-manager',
                       '--', 'del-ssl',
                       '--', 'set-ssl',
                       '/etc/xensource/xapi-ssl.pem',
                       '/etc/xensource/xapi-ssl.pem',
                       preinstalled_cacert,
                       '--', 'set-manager', controller])


def composeController(protocol, controllerIP, tcpport):
    bootstrap = False
    controller = ''
    if protocol == 'ssl':
        bootstrap = True
        controller = protocol + ':' + controllerIP + ':' + tcpport
    elif protocol == 'pssl':
        controller = protocol + ':' + tcpport
    return bootstrap, controller


def vswitchCfgQuery(action_args):
    cmd = [vsctl, '-vconsole:off'] + action_args
    output = subprocess.Popen(cmd, stdout=subprocess.PIPE).communicate()
    if len(output) == 0 or output[0] is None:
        output = ''
    else:
        output = output[0].strip()
    return output


def vswitchCfgMod(action_args):
    cmd = [vsctl, '--timeout=5', '-vconsole:off'] + action_args
    exitcode = subprocess.call(cmd)
    if exitcode != 0:
        raise XenAPIPlugin.Failure('VSWITCH_CONFIG_MOD_FAILURE',
                                   [str(exitcode), str(action_args)])


def emergency_reset(session, args):
    cmd = [vsctl, '--timeout=5', 'emer-reset']
    exitcode = subprocess.call(cmd)
    if exitcode != 0:
        raise XenAPIPlugin.Failure('VSWITCH_EMER_RESET_FAILURE',
                                   [str(exitcode)])

    return 'Successfully reset configuration'


def addFlow(switch, flow):
    cmd = [ofctl, 'add-flow', switch, flow]
    exitcode = subprocess.call(cmd)
    if exitcode != 0:
        raise XenAPIPlugin.Failure('VSWITCH_ADD_FLOW_FAILURE',
                                   [str(exitcode), str(switch), str(flow)])


if __name__ == '__main__':
    XenAPIPlugin.dispatch({'update': update,
                           'emergency_reset': emergency_reset})
