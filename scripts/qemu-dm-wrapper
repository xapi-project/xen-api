#!/usr/bin/python
#
# Copyright (c) Citrix Systems 2007-2011
# Author: Gianni Tedesco and Dave Scott
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published
# by the Free Software Foundation; version 2.1 only. with the special
# exception on linking described in file LICENSE.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.

from syslog import syslog
from syslog import LOG_EMERG, LOG_ALERT, LOG_CRIT, LOG_ERR, LOG_WARNING
from syslog import LOG_NOTICE, LOG_INFO, LOG_DEBUG
from xen.lowlevel import xs

def do_cloexec(fd):
	from fcntl import fcntl, F_GETFD, F_SETFD, FD_CLOEXEC

	ret = fcntl(fd, F_GETFD, FD_CLOEXEC)
	if ret < 0:
		return
	fcntl(fd, F_SETFD, ret|FD_CLOEXEC)

def write_dm_pid(domid, pid):
	store = xs.xs()
	store.write('', '/local/domain/%d/qemu-pid'%domid, '%d'%pid)

def is_sdk():
	try:
		store = xs.xs()
		i = int(store.read('', 'domid'))
	except:
		return False
	return i != 0

def fake_dm(domid):
	from time import sleep
	from os import getpid

	store = xs.xs()

	store.write('', '/local/domain/%d/qemu-pid'%domid, '%d'%getpid())
	store.write('', '/local/domain/%d/device-misc/dm-ready', '1')
	store.write('', '/local/domain/%d/console/vnc-port'%domid, '%d'%(domid))

	while True:
		sleep(600)

	return 0

def cleanup(domid):
	from xen.lowlevel import xc
	hcall = xc.xc()

	syslog(LOG_ERR, 'Unexpected termination, cleaning up...')

	try:
		hcall.domain_destroy(domid)
	except xc.Error:
		# we could have raced with another domain shutdown
		pass

def enable_core_dumps():
	from resource import getrlimit, RLIMIT_CORE, setrlimit

	limit = 64 * 1024 * 1024
	oldlimits = getrlimit(RLIMIT_CORE)
	setrlimit(RLIMIT_CORE, (limit, oldlimits[1]))
	return limit

def main(argv):
	from os import environ, fdopen, pipe
	from subprocess import Popen
	from syslog import openlog, LOG_NDELAY, LOG_NOWAIT, LOG_DAEMON

	qemu_env = environ
	qemu_dm = '/usr/lib/xen/bin/qemu-dm'
	domid = int(argv[1])
	logfile = argv[2]
	qemu_args = ['qemu-dm-%d'%domid] + argv[3:]

	if is_sdk() is True:
		return fake_dm(domid)

	openlog('qemu-dm-%d'%domid, LOG_NDELAY|LOG_NOWAIT, LOG_DAEMON)

	syslog(LOG_INFO, "qemu-dm-wrapper in python:")
	syslog(LOG_INFO, "Using domid: %d" % domid)
	syslog(LOG_INFO, "Arguments: %s" % " ".join(argv[2:]))
	syslog(LOG_INFO, "everything else is from qemu-dm:")

	core_dump_limit = enable_core_dumps()
	syslog(LOG_INFO, "core dump limit: %d" % core_dump_limit)

	(r,w) = pipe()
	do_cloexec(r)
	outpipe = fdopen(w, 'w')
	inpipe = fdopen(r, 'r')

	p = Popen(qemu_args,
		executable = qemu_dm,
		stdin=open('/dev/null', 'r'),
		stdout=outpipe, stderr=outpipe,
		shell=False, close_fds=True)

	del outpipe

	write_dm_pid(domid, p.pid)

	while True:
		l = inpipe.readline()
		if l == '':
			break
		l = l[:-1]
		syslog(LOG_NOTICE, l)

	if p.returncode is None:
		p.wait()

	if p.returncode < 0:
		syslog(LOG_ERR, 'Terminated with signal %d'%-p.returncode)
	else:
		syslog(LOG_NOTICE, 'Exited with code %d'%p.returncode)
		if p.returncode == 0:
			return 0

	cleanup(domid)
	return 1

if __name__ == '__main__':
	from sys import argv
	raise SystemExit, main(argv)
