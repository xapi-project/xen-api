(*
 * Copyright (C) 2006-2009 Citrix Systems Inc.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation; version 2.1 only. with the special
 * exception on linking described in file LICENSE.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *)
open Pervasiveext

module Real = Debug.Debugger(struct let name = "taskhelper" end)
module Dummy = Debug.Debugger(struct let name = "dummytaskhelper" end)

(** Every operation has an origin: either the HTTP connection it came from or
    an internal subsystem (eg synchroniser thread / event handler
 thread) *)
type origin = 
    | Http of Http.request * Unix.file_descr
    | Internal

let string_of_origin = function
  | Http (req, fd) -> 
      let peer = match Unix.getpeername fd with
	| Unix.ADDR_UNIX _ -> "Unix domain socket"
	| Unix.ADDR_INET _ -> "Internet" in (* unfortunately all connections come from stunnel on localhost *)
      Printf.sprintf "HTTP request from %s with User-Agent: %s" peer (default "unknown" req.Http.user_agent)
  | Internal -> "Internal"

(** A Context is used to represent every API invocation. It may be extended
    to include extra data without changing all the autogenerated signatures *)
type t = { session_id: API.ref_session option;
	   task_id: API.ref_task;
	   task_in_database: bool;
	   forwarded_task : bool;
	   origin: origin;
	   task_name: string; (* Name for dummy task FIXME: used only for dummy task, as real task as their name in the database *)
	   database: Db_ref.t;
	 }

let get_session_id x =
  match x.session_id with
    | None -> failwith "Could not find a session_id"
    | Some x -> x

let forwarded_task ctx =
  ctx.forwarded_task  
  
let get_task_id ctx = 
  ctx.task_id

let get_task_id_string_name ctx =
  (Ref.string_of ctx.task_id, ctx.task_name)

let task_in_database ctx = 
  ctx.task_in_database

let get_task_name ctx =
  ctx.task_name

let get_origin ctx = 
  string_of_origin ctx.origin

let string_of x = 
  let session_id = match x.session_id with 
    | None -> "None" | Some x -> Ref.string_of x in
  Printf.sprintf "Context { session_id: %s; task_id: %s; task_in_database: %b; forwarded_task: %b; origin: %s; task_name: %s }"
    session_id
    (Ref.string_of x.task_id)
    x.task_in_database
    x.forwarded_task
    (string_of_origin x.origin)
    x.task_name

let database_of x = x.database

(** Calls coming in from the unix socket are pre-authenticated *)
let is_unix_socket s =
  match Unix.getpeername s with
      Unix.ADDR_UNIX _ -> true
    | Unix.ADDR_INET _ -> false

(** Calls coming directly into xapi on port 80 from remote IPs are unencrypted *)
let is_unencrypted s = 
  match Unix.getpeername s with
    | Unix.ADDR_UNIX _ -> false
    | Unix.ADDR_INET (addr, _) when addr = Unix.inet_addr_loopback -> false
    | Unix.ADDR_INET _ -> true

let default_database () = 
	if Pool_role.is_master ()
	then Db_backend.make ()
	else Db_ref.Remote

let preauth ~__context =
  match __context.origin with
      Internal -> false
    | Http (req,s) -> is_unix_socket s

let initial =
  { session_id = None;
    task_id = Ref.of_string "initial_task";
    task_in_database = false;
    forwarded_task = false;
    origin = Internal;
    task_name = "initial_task";
	database = default_database ();
  }

(* ref fn used to break the cyclic dependency between context, db_actions and taskhelper *)
let __get_task_name : (__context:t -> API.ref_task -> string) ref = 
  ref (fun ~__context t -> "__get_task_name not set")
let __make_task = 
  ref (fun ~__context ?(description:string option) ?(session_id:API.ref_session option) ?(subtask_of:API.ref_task option) (task_name:string) -> Ref.null, Uuid.null)
let __destroy_task : (__context:t -> API.ref_task -> unit) ref = 
  ref (fun ~__context:_ _ -> ()) 
let __string_of_task : (string -> API.ref_task -> string) ref =
  ref (fun _ _ -> "__string_of_task not set")

let string_of_task __context = 
    !__string_of_task __context.task_name __context.task_id

let switch_database ~__context ~database = {__context with database = database}

(** destructors *)
let destroy __context =
  let debug = if __context.task_in_database then Real.debug else Dummy.debug in
  if __context.forwarded_task
  then debug "forwarded task destroyed";
  if not __context.forwarded_task 
  then !__destroy_task ~__context __context.task_id


(* CP-982: create tracking id in log files to link username to actions *)
let trackid_of_session ?(with_brackets=false) ?(prefix="") session_id =
  match session_id with
    | None -> ""
    | Some session_id -> (* a hash is used instead of printing the sensitive session_id value *)
      let trackid = Printf.sprintf "trackid=%s" (Digest.to_hex (Digest.string (Ref.string_of session_id))) in
      if (with_brackets) then Printf.sprintf "%s(%s)" prefix trackid else trackid

let trackid ?(with_brackets=false) ?(prefix="") __context = (* CP-982: create tracking id in log files to link username to actions *)
  trackid_of_session ~with_brackets ~prefix __context.session_id 

(** constructors *)
let from_forwarded_task ?(__context=initial) ?session_id ?(origin=Internal) task_id =
  let task_name = 
    if Ref.is_dummy task_id 
    then Ref.name_of_dummy task_id
    else !__get_task_name ~__context task_id 
    in   
    let info = if not (Ref.is_dummy task_id) then Real.info else Dummy.debug in
      (* CP-982: promote tracking debug line to info status *)
      info "task %s forwarded%s" (!__string_of_task task_name task_id) (trackid_of_session ~with_brackets:true ~prefix:" " session_id);
      { session_id = session_id; 
        task_id = task_id;
        forwarded_task = true;
        task_in_database = not (Ref.is_dummy task_id);
        origin = origin;
        task_name = task_name;
		database = default_database ();
	  } 

let make ?(__context=initial) ?(quiet=false) ?subtask_of ?session_id ?(database=default_database ()) ?(task_in_database=false) ?task_description ?(origin=Internal) task_name =
  let task_id, task_uuid =
    if task_in_database 
    then !__make_task ~__context ?description:task_description ?session_id ?subtask_of task_name
    else Ref.make_dummy task_name, Uuid.null
  in
  let task_uuid =
    if task_uuid = Uuid.null
    then ""
    else Printf.sprintf " (uuid:%s)" (Uuid.to_string task_uuid)
  in

  let info = if task_in_database then Real.info else Dummy.debug in
  if not quiet && subtask_of <> None then
    info "task %s%s created%s%s" (* CP-982: promote tracking debug line to info status *)
      (!__string_of_task task_name task_id) 
      task_uuid
      (trackid_of_session ~with_brackets:true ~prefix:" " session_id) (* CP-982: link each task to original session created during login *)
      (match subtask_of with
        | None -> ""
        | Some subtask_of -> " by task " ^ !__string_of_task "" subtask_of)
    ;
    { session_id = session_id;
	  database = database;
      task_id = task_id;
      task_in_database = task_in_database;
      origin = origin;
      forwarded_task = false;
      task_name = task_name } 
